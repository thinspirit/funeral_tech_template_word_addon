"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOrUpdateBotRegistration = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const tools_1 = require("../../../../common/tools");
const appStudioClient_1 = require("../appStudio/appStudioClient");
const utils_1 = require("./utils");
async function createOrUpdateBotRegistration(m365TokenProvider, botRegistration) {
    // 1. Get bot registration from remote.
    // 2. If Not Found, Then create a new bot registration.
    // 3. Else:
    //      3.1 Merge bot registration (remote + passed-in, respect passed-in).
    //      3.2 Update bot registration.
    const appStudioTokenRes = await m365TokenProvider.getAccessToken({
        scopes: tools_1.AppStudioScopes,
    });
    if (appStudioTokenRes.isErr()) {
        return teamsfx_api_1.err(appStudioTokenRes.error);
    }
    const appStudioToken = appStudioTokenRes.value;
    const remoteBotRegistration = await appStudioClient_1.AppStudioClient.getBotRegistration(appStudioToken, botRegistration.botId);
    if (!remoteBotRegistration) {
        // Not Found case.
        await appStudioClient_1.AppStudioClient.createBotRegistration(appStudioToken, botRegistration, false);
    }
    else {
        // Update bot registration.
        const mergedBotRegistration = utils_1.Utils.mergeIBotRegistration(botRegistration, remoteBotRegistration);
        await appStudioClient_1.AppStudioClient.updateBotRegistration(appStudioToken, mergedBotRegistration);
    }
    return teamsfx_api_1.ok(remoteBotRegistration !== undefined);
}
exports.createOrUpdateBotRegistration = createOrUpdateBotRegistration;
//# sourceMappingURL=botFrameworkRegistration.js.map