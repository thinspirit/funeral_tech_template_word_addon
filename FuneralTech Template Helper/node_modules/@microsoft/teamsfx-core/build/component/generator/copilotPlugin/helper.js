"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.listOperations = exports.OpenAIPluginManifestHelper = void 0;
const tslib_1 = require("tslib");
/**
 * @author yuqzho@microsoft.com
 */
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const axios_1 = tslib_1.__importDefault(require("axios"));
const utils_1 = require("../utils");
const interfaces_1 = require("../../../common/spec-parser/interfaces");
const specParser_1 = require("../../../common/spec-parser/specParser");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const ManifestUtils_1 = require("../../driver/teamsApp/utils/ManifestUtils");
const path_1 = tslib_1.__importDefault(require("path"));
const localizeUtils_1 = require("../../../common/localizeUtils");
const manifestFilePath = "/.well-known/ai-plugin.json";
const teamsFxEnv = "${{TEAMSFX_ENV}}";
const componentName = "OpenAIPluginManifestHelper";
var OpenAIPluginManifestErrorType;
(function (OpenAIPluginManifestErrorType) {
    OpenAIPluginManifestErrorType[OpenAIPluginManifestErrorType["AuthNotSupported"] = 0] = "AuthNotSupported";
    OpenAIPluginManifestErrorType[OpenAIPluginManifestErrorType["ApiUrlMissing"] = 1] = "ApiUrlMissing";
})(OpenAIPluginManifestErrorType || (OpenAIPluginManifestErrorType = {}));
class OpenAIPluginManifestHelper {
    static async loadOpenAIPluginManifest(domain) {
        const path = domain + manifestFilePath;
        try {
            const res = await utils_1.sendRequestWithRetry(async () => {
                return await axios_1.default.get(path);
            }, 3);
            return res.data;
        }
        catch (e) {
            throw new teamsfx_api_1.UserError(componentName, "loadOpenAIPluginManifest", localizeUtils_1.getLocalizedString("error.copilotPlugin.openAiPluginManifest.CannotGetManifest", path), localizeUtils_1.getLocalizedString("error.copilotPlugin.openAiPluginManifest.CannotGetManifest", path));
        }
    }
    static async updateManifest(openAiPluginManifest, appPackageFolder) {
        const manifestPath = path_1.default.join(appPackageFolder, "manifest.json");
        const manifestRes = await ManifestUtils_1.manifestUtils._readAppManifest(manifestPath);
        if (manifestRes.isErr()) {
            return teamsfx_api_1.err(manifestRes.error);
        }
        const manifest = manifestRes.value;
        manifest.name.full = openAiPluginManifest.name_for_model;
        manifest.name.short = `${openAiPluginManifest.name_for_human}-${teamsFxEnv}`;
        manifest.description.full = openAiPluginManifest.description_for_model;
        manifest.description.short = openAiPluginManifest.description_for_human;
        manifest.developer.websiteUrl = openAiPluginManifest.legal_info_url;
        manifest.developer.privacyUrl = openAiPluginManifest.legal_info_url;
        manifest.developer.termsOfUseUrl = openAiPluginManifest.legal_info_url;
        await fs_extra_1.default.writeFile(manifestPath, JSON.stringify(manifest, null, "\t"), "utf-8");
        return teamsfx_api_1.ok(undefined);
    }
}
exports.OpenAIPluginManifestHelper = OpenAIPluginManifestHelper;
async function listOperations(context, manifest, apiSpecUrl, shouldLogWarning = true) {
    if (manifest) {
        apiSpecUrl = manifest.api.url;
        const errors = validateOpenAIPluginManifest(manifest);
        if (errors.length > 0) {
            return teamsfx_api_1.err(errors);
        }
    }
    const specParser = new specParser_1.SpecParser(apiSpecUrl);
    const validationRes = await specParser.validate();
    if (validationRes.status === interfaces_1.ValidationStatus.Error) {
        return teamsfx_api_1.err(validationRes.errors);
    }
    if (shouldLogWarning && validationRes.warnings.length > 0) {
        for (const warning of validationRes.warnings) {
            context.logProvider.warning(warning.content);
        }
    }
    const operations = await specParser.list();
    return teamsfx_api_1.ok(operations);
}
exports.listOperations = listOperations;
function validateOpenAIPluginManifest(manifest) {
    const errors = [];
    if (!manifest.api.url) {
        errors.push({
            type: OpenAIPluginManifestErrorType.ApiUrlMissing,
            content: "Missing url in manifest",
        });
    }
    if (manifest.auth.type !== teamsfx_api_1.OpenAIManifestAuthType.None) {
        errors.push({
            type: OpenAIPluginManifestErrorType.AuthNotSupported,
            content: "Auth type not supported",
        });
    }
    return errors;
}
//# sourceMappingURL=helper.js.map