"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendErrorEvent = exports.sendSuccessEvent = exports.sendStartEvent = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const globalVars_1 = require("../core/globalVars");
const constants_1 = require("./constants");
function getCommonProperties() {
    const props = {
        [constants_1.TelemetryConstants.properties.appId]: globalVars_1.globalVars.teamsAppId,
        [constants_1.TelemetryConstants.properties.tenantId]: globalVars_1.globalVars.m365TenantId,
    };
    return props;
}
function sendStartEvent(eventName, properties, measurements) {
    var _a;
    const props = Object.assign(Object.assign({}, getCommonProperties()), properties);
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName + "-start", props, measurements !== null && measurements !== void 0 ? measurements : {});
}
exports.sendStartEvent = sendStartEvent;
function sendSuccessEvent(eventName, properties, measurements) {
    var _a;
    const props = Object.assign(Object.assign(Object.assign({}, getCommonProperties()), properties), { [constants_1.TelemetryConstants.properties.success]: constants_1.TelemetryConstants.values.yes });
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryEvent(eventName, props, measurements !== null && measurements !== void 0 ? measurements : {});
}
exports.sendSuccessEvent = sendSuccessEvent;
function sendErrorEvent(eventName, error, properties, measurements) {
    var _a;
    const errorCode = error.source + "." + error.name;
    const errorType = error instanceof teamsfx_api_1.SystemError
        ? constants_1.TelemetryConstants.values.systemError
        : constants_1.TelemetryConstants.values.userError;
    const props = Object.assign(Object.assign(Object.assign({}, getCommonProperties()), properties), { [constants_1.TelemetryConstants.properties.success]: constants_1.TelemetryConstants.values.no, [constants_1.TelemetryConstants.properties.errorCode]: errorCode, [constants_1.TelemetryConstants.properties.errorType]: errorType, [constants_1.TelemetryConstants.properties.errorMessage]: error.message });
    (_a = globalVars_1.TOOLS.telemetryReporter) === null || _a === void 0 ? void 0 : _a.sendTelemetryErrorEvent(eventName, props, measurements !== null && measurements !== void 0 ? measurements : {}, [
        constants_1.TelemetryConstants.properties.errorMessage,
    ]);
}
exports.sendErrorEvent = sendErrorEvent;
//# sourceMappingURL=telemetry.js.map