import { Func, FxError, Inputs, InputsWithProjectPath, Result, Tools, Void } from "@microsoft/teamsfx-api";
import { DotenvParseOutput } from "dotenv";
import "../component/driver/index";
import { CoreHookContext, PreProvisionResForVS, VersionCheckRes } from "./types";
export declare class FxCoreV3Implement {
    tools: Tools;
    isFromSample?: boolean;
    settingsVersion?: string;
    constructor(tools: Tools);
    dispatch<Inputs, ExecuteRes>(exec: (inputs: Inputs) => Promise<ExecuteRes>, inputs: Inputs): Promise<ExecuteRes>;
    dispatchUserTask<Inputs, ExecuteRes>(exec: (func: Func, inputs: Inputs) => Promise<ExecuteRes>, func: Func, inputs: Inputs): Promise<ExecuteRes>;
    createProject(inputs: Inputs): Promise<Result<string, FxError>>;
    provisionResources(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    deployArtifacts(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    deployAadManifest(inputs: Inputs): Promise<Result<Void, FxError>>;
    publishApplication(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    deployTeamsManifest(inputs: Inputs, ctx?: CoreHookContext): Promise<Result<Void, FxError>>;
    executeUserTask(func: Func, inputs: Inputs): Promise<Result<any, FxError>>;
    addWebpart(inputs: Inputs): Promise<Result<Void, FxError>>;
    publishInDeveloperPortal(inputs: Inputs): Promise<Result<Void, FxError>>;
    grantPermission(inputs: Inputs): Promise<Result<any, FxError>>;
    checkPermission(inputs: Inputs): Promise<Result<any, FxError>>;
    listCollaborator(inputs: Inputs): Promise<Result<any, FxError>>;
    /**
     * get all dot envs
     */
    getDotEnvs(inputs: InputsWithProjectPath): Promise<Result<{
        [name: string]: DotenvParseOutput;
    }, FxError>>;
    phantomMigrationV3(inputs: Inputs): Promise<Result<Void, FxError>>;
    innerMigrationV3(inputs: Inputs): Promise<Result<Void, FxError>>;
    projectVersionCheck(inputs: Inputs): Promise<Result<VersionCheckRes, FxError>>;
    preProvisionForVS(inputs: Inputs): Promise<Result<PreProvisionResForVS, FxError>>;
    preCheckYmlAndEnvForVS(inputs: Inputs): Promise<Result<Void, FxError>>;
    createEnv(inputs: Inputs): Promise<Result<Void, FxError>>;
    createEnvCopyV3(targetEnvName: string, sourceEnvName: string, projectPath: string): Promise<Result<Void, FxError>>;
    buildAadManifest(inputs: Inputs): Promise<Result<Void, FxError>>;
    validateManifest(inputs: Inputs): Promise<Result<any, FxError>>;
    validateAppPackage(inputs: Inputs): Promise<Result<any, FxError>>;
    createAppPackage(inputs: Inputs): Promise<Result<any, FxError>>;
    copilotPluginAddAPI(inputs: Inputs): Promise<Result<any, FxError>>;
    previewWithManifest(inputs: Inputs): Promise<Result<string, FxError>>;
}
//# sourceMappingURL=FxCoreImplementV3.d.ts.map