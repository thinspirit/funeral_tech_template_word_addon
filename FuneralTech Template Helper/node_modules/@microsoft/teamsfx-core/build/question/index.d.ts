import { FxError, IQTreeNode, Result } from "@microsoft/teamsfx-api";
export * from "./questionNames";
export * from "./create";
declare class QuestionNodes {
    createProject(): IQTreeNode | undefined;
    createProjectCliHelp(): IQTreeNode | undefined;
    addWebpart(): IQTreeNode | undefined;
    selectTeamsAppManifest(): IQTreeNode | undefined;
    selectTeamsAppValidationMethod(): IQTreeNode | undefined;
    selectTeamsAppPackage(): IQTreeNode | undefined;
    previewWithTeamsAppManifest(): IQTreeNode | undefined;
    listCollaborator(): IQTreeNode | undefined;
    grantPermission(): IQTreeNode | undefined;
    deployAadManifest(): IQTreeNode | undefined;
    createNewEnv(): IQTreeNode | undefined;
    copilotPluginAddAPI(): IQTreeNode | undefined;
}
export declare const questionNodes: QuestionNodes;
declare class Questions {
    createProject(): Result<IQTreeNode | undefined, FxError>;
    createProjectCliHelp(): Result<IQTreeNode | undefined, FxError>;
    addWebpart(): Result<IQTreeNode | undefined, FxError>;
    selectTeamsAppManifest(): Result<IQTreeNode | undefined, FxError>;
    selectTeamsAppValidationMethod(): Result<IQTreeNode | undefined, FxError>;
    selectTeamsAppPackage(): Result<IQTreeNode | undefined, FxError>;
    previewWithTeamsAppManifest(): Result<IQTreeNode | undefined, FxError>;
    copilotPluginAddAPI(): Result<IQTreeNode | undefined, FxError>;
    listCollaborator(): Result<IQTreeNode | undefined, FxError>;
    grantPermission(): Result<IQTreeNode | undefined, FxError>;
    deployAadManifest(): Result<IQTreeNode | undefined, FxError>;
    createNewEnv(): Result<IQTreeNode | undefined, FxError>;
}
export declare const questions: Questions;
//# sourceMappingURL=index.d.ts.map