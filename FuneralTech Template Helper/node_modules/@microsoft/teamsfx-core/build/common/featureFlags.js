"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCopilotPluginEnabled = exports.isImportSPFxEnabled = exports.isVideoFilterEnabled = exports.isV3Enabled = exports.isCLIDotNetEnabled = exports.initializePreviewFeatureFlags = exports.isFeatureFlagEnabled = void 0;
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const constants_1 = require("./constants");
// Determine whether feature flag is enabled based on environment variable setting
function isFeatureFlagEnabled(featureFlagName, defaultValue = false) {
    const flag = process.env[featureFlagName];
    if (flag === undefined) {
        return defaultValue; // allows consumer to set a default value when environment variable not set
    }
    else {
        return flag === "1" || flag.toLowerCase() === "true"; // can enable feature flag by set environment variable value to "1" or "true"
    }
}
exports.isFeatureFlagEnabled = isFeatureFlagEnabled;
/**
 * Update all preview feature flags.
 */
function initializePreviewFeatureFlags() {
    process.env[constants_1.FeatureFlagName.BotNotification] = "true";
    process.env[constants_1.FeatureFlagName.M365App] = "true";
    process.env[constants_1.FeatureFlagName.AadManifest] = "true";
    process.env[constants_1.FeatureFlagName.ApiConnect] = "true";
    process.env[constants_1.FeatureFlagName.DeployManifest] = "true";
}
exports.initializePreviewFeatureFlags = initializePreviewFeatureFlags;
function isCLIDotNetEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.CLIDotNet, false);
}
exports.isCLIDotNetEnabled = isCLIDotNetEnabled;
function isV3Enabled() {
    return process.env.TEAMSFX_V3 ? process.env.TEAMSFX_V3 === "true" : true;
}
exports.isV3Enabled = isV3Enabled;
function isVideoFilterEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.VideoFilter, false);
}
exports.isVideoFilterEnabled = isVideoFilterEnabled;
function isImportSPFxEnabled() {
    return true;
    //return isFeatureFlagEnabled(FeatureFlagName.ImportSPFx, false);
}
exports.isImportSPFxEnabled = isImportSPFxEnabled;
function isCopilotPluginEnabled() {
    return isFeatureFlagEnabled(constants_1.FeatureFlagName.CopilotPlugin, false);
}
exports.isCopilotPluginEnabled = isCopilotPluginEnabled;
//# sourceMappingURL=featureFlags.js.map