"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.sampleProvider = void 0;
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const utils_1 = require("../component/generator/utils");
const samples_config_v3_json_1 = tslib_1.__importDefault(require("./samples-config-v3.json"));
const featureFlags_1 = require("./featureFlags");
const packageJson = require("../../package.json");
class configInfo {
}
configInfo.owner = "OfficeDev";
configInfo.repo = "TeamsFx-Samples";
configInfo.tree = "v2.2.0";
configInfo.file = ".config/samples-config-v3.json";
class SampleProvider {
    async fetchSampleConfig() {
        this.sampleConfigs = undefined;
        try {
            const fileResponse = await utils_1.sendRequestWithTimeout(async () => {
                return await axios_1.default.get(`https://raw.githubusercontent.com/${configInfo.owner}/${configInfo.repo}/${configInfo.tree}/${configInfo.file}`, { responseType: "json" });
            }, 1000, 3);
            if (fileResponse && fileResponse.data) {
                this.sampleConfigs = fileResponse.data;
            }
        }
        catch (e) {
            this.sampleConfigs = undefined;
        }
    }
    get SampleCollection() {
        var _a;
        const samples = ((_a = this.sampleConfigs) !== null && _a !== void 0 ? _a : samples_config_v3_json_1.default).samples.map((sample) => {
            return {
                id: sample.id,
                title: sample.title,
                shortDescription: sample.shortDescription,
                fullDescription: sample.fullDescription,
                tags: sample.tags,
                time: sample.time,
                configuration: sample.configuration,
                suggested: sample.suggested,
                url: sample.url ? sample.url : `${this.getBaseSampleUrl()}${sample.id}`,
            };
        });
        // remove video filter sample app if feature flag is disabled.
        if (!featureFlags_1.isVideoFilterEnabled()) {
            const videoFilterSampleId = "teams-videoapp-sample";
            const index = samples.findIndex((sample) => sample.id === videoFilterSampleId);
            if (index !== -1) {
                samples.splice(index, 1);
            }
        }
        this.sampleCollection = {
            samples,
        };
        return this.sampleCollection;
    }
    getBaseSampleUrl() {
        var _a;
        const version = packageJson.version;
        if (version.includes("alpha")) {
            return "https://github.com/OfficeDev/TeamsFx-Samples/tree/dev/";
        }
        if (version.includes("rc")) {
            return "https://github.com/OfficeDev/TeamsFx-Samples/tree/v3/";
        }
        return ((_a = this.sampleConfigs) !== null && _a !== void 0 ? _a : samples_config_v3_json_1.default).baseUrl;
    }
}
exports.sampleProvider = new SampleProvider();
//# sourceMappingURL=samples.js.map