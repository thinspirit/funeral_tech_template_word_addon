"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
exports.assembleError = exports.ConcurrentError = exports.NotImplementedError = exports.EmptyOptionError = exports.UserCancelError = exports.HttpServerError = exports.HttpClientError = exports.MissingRequiredFileError = exports.NoEnvFilesError = exports.InputValidationError = exports.MissingRequiredInputError = exports.InstallSoftwareError = exports.UnhandledUserError = exports.UnhandledError = exports.FilePermissionError = exports.WriteFileError = exports.ReadFileError = exports.JSONSyntaxError = exports.InvalidProjectError = exports.InvalidActionInputError = exports.MissingEnvironmentVariablesError = exports.FileNotFoundError = void 0;
const teamsfx_api_1 = require("@microsoft/teamsfx-api");
const lodash_1 = require("lodash");
const localizeUtils_1 = require("../common/localizeUtils");
const globalVars_1 = require("../core/globalVars");
class FileNotFoundError extends teamsfx_api_1.UserError {
    constructor(source, filePath, helpLink) {
        const key = "error.common.FileNotFoundError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "FileNotFoundError",
            message: localizeUtils_1.getDefaultString(key, filePath),
            displayMessage: localizeUtils_1.getLocalizedString(key, filePath),
            helpLink: helpLink,
        };
        super(errorOptions);
    }
}
exports.FileNotFoundError = FileNotFoundError;
class MissingEnvironmentVariablesError extends teamsfx_api_1.UserError {
    constructor(source, variableNames, filePath, helpLink) {
        const templateFilePath = filePath || globalVars_1.globalVars.ymlFilePath || "";
        const envFilePath = globalVars_1.globalVars.envFilePath || "";
        const key = "error.common.MissingEnvironmentVariablesError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "MissingEnvironmentVariablesError",
            message: localizeUtils_1.getDefaultString(key, variableNames, templateFilePath, envFilePath),
            displayMessage: localizeUtils_1.getLocalizedString(key, variableNames, templateFilePath, envFilePath),
            helpLink: helpLink || "https://aka.ms/teamsfx-v5.0-guide#environments",
        };
        super(errorOptions);
    }
}
exports.MissingEnvironmentVariablesError = MissingEnvironmentVariablesError;
class InvalidActionInputError extends teamsfx_api_1.UserError {
    constructor(actionName, parameters, helpLink) {
        const key = "error.yaml.InvalidActionInputError";
        const errorOptions = {
            source: lodash_1.camelCase(actionName),
            name: "InvalidActionInputError",
            message: localizeUtils_1.getDefaultString(key, actionName, parameters.join(","), globalVars_1.globalVars.ymlFilePath),
            displayMessage: localizeUtils_1.getLocalizedString(key, actionName, parameters.join(","), globalVars_1.globalVars.ymlFilePath),
            helpLink: helpLink || "https://aka.ms/teamsfx-actions",
        };
        super(errorOptions);
    }
}
exports.InvalidActionInputError = InvalidActionInputError;
class InvalidProjectError extends teamsfx_api_1.UserError {
    constructor() {
        super({
            message: localizeUtils_1.getDefaultString("error.common.InvalidProjectError"),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.InvalidProjectError"),
            source: "coordinator",
        });
    }
}
exports.InvalidProjectError = InvalidProjectError;
class JSONSyntaxError extends teamsfx_api_1.UserError {
    constructor(filePathOrContent, e, source) {
        super({
            message: localizeUtils_1.getDefaultString("error.common.JSONSyntaxError", filePathOrContent, e.message),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.JSONSyntaxError", filePathOrContent, e.message),
            source: source || "coordinator",
        });
        super.stack = e.stack;
    }
}
exports.JSONSyntaxError = JSONSyntaxError;
class ReadFileError extends teamsfx_api_1.SystemError {
    constructor(e, source) {
        super({
            source: source || "unknown",
            message: e.message || localizeUtils_1.getDefaultString("error.common.ReadFileError", e.message),
            displayMessage: e.message || localizeUtils_1.getLocalizedString("error.common.ReadFileError", e.message),
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.ReadFileError = ReadFileError;
class WriteFileError extends teamsfx_api_1.SystemError {
    constructor(e, source) {
        super({
            source: source || "unknown",
            message: e.message || localizeUtils_1.getDefaultString("error.common.WriteFileError", e.message),
            displayMessage: e.message || localizeUtils_1.getLocalizedString("error.common.WriteFileError", e.message),
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.WriteFileError = WriteFileError;
class FilePermissionError extends teamsfx_api_1.UserError {
    constructor(e, source) {
        const msg = localizeUtils_1.getDefaultString("error.common.FilePermissionError", e.message);
        super({
            source: source || "unknown",
            message: msg,
            displayMessage: msg,
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.FilePermissionError = FilePermissionError;
class UnhandledError extends teamsfx_api_1.SystemError {
    constructor(e, source) {
        source = source || "unknown";
        super({
            source: lodash_1.camelCase(source),
            message: localizeUtils_1.getDefaultString("error.common.UnhandledError", source, JSON.stringify(e, Object.getOwnPropertyNames(e))),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.UnhandledError", source, e.message || JSON.stringify(e, Object.getOwnPropertyNames(e))),
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.UnhandledError = UnhandledError;
class UnhandledUserError extends teamsfx_api_1.UserError {
    constructor(e, source, helpLink) {
        source = source || "unknown";
        super({
            source: lodash_1.camelCase(source),
            message: localizeUtils_1.getDefaultString("error.common.UnhandledError", source, JSON.stringify(e, Object.getOwnPropertyNames(e))),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.UnhandledError", source, e.message || JSON.stringify(e, Object.getOwnPropertyNames(e))),
            helpLink: helpLink,
        });
        if (e.stack)
            super.stack = e.stack;
    }
}
exports.UnhandledUserError = UnhandledUserError;
class InstallSoftwareError extends teamsfx_api_1.UserError {
    constructor(source, nameAndVersion, helpLink) {
        super({
            source: lodash_1.camelCase(source || "common"),
            message: localizeUtils_1.getDefaultString("error.common.InstallSoftwareError", nameAndVersion),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.InstallSoftwareError", nameAndVersion),
        });
        if (helpLink)
            this.helpLink = helpLink;
    }
}
exports.InstallSoftwareError = InstallSoftwareError;
class MissingRequiredInputError extends teamsfx_api_1.UserError {
    constructor(name, source) {
        super({
            source: source || "coordinator",
            message: localizeUtils_1.getDefaultString("error.common.MissingRequiredInputError", name),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.MissingRequiredInputError", name),
        });
    }
}
exports.MissingRequiredInputError = MissingRequiredInputError;
class InputValidationError extends teamsfx_api_1.UserError {
    constructor(name, reason) {
        super({
            source: "coordinator",
            message: localizeUtils_1.getDefaultString("error.common.InputValidationError", name, reason),
            displayMessage: localizeUtils_1.getLocalizedString("error.common.InputValidationError", name, reason),
        });
    }
}
exports.InputValidationError = InputValidationError;
class NoEnvFilesError extends teamsfx_api_1.UserError {
    constructor(source) {
        const key = "error.common.NoEnvFilesError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "NoEnvFilesError",
            message: localizeUtils_1.getDefaultString(key),
            displayMessage: localizeUtils_1.getLocalizedString(key),
        };
        super(errorOptions);
    }
}
exports.NoEnvFilesError = NoEnvFilesError;
class MissingRequiredFileError extends teamsfx_api_1.UserError {
    constructor(source, task, file) {
        const key = "error.common.MissingRequiredFileError";
        const errorOptions = {
            source: lodash_1.camelCase(source),
            name: "MissingRequiredFileError",
            message: localizeUtils_1.getDefaultString(key, task, file),
            displayMessage: localizeUtils_1.getLocalizedString(key, task, file),
        };
        super(errorOptions);
    }
}
exports.MissingRequiredFileError = MissingRequiredFileError;
class HttpClientError extends teamsfx_api_1.UserError {
    constructor(actionName, responseBody, helpLink) {
        const messageKey = "error.common.HttpClientError";
        super({
            source: lodash_1.camelCase(actionName),
            name: "HttpClientError",
            message: localizeUtils_1.getDefaultString(messageKey, actionName, responseBody),
            displayMessage: localizeUtils_1.getLocalizedString(messageKey, actionName, responseBody),
            helpLink: helpLink,
        });
    }
}
exports.HttpClientError = HttpClientError;
class HttpServerError extends teamsfx_api_1.SystemError {
    constructor(actionName, responseBody) {
        const messageKey = "error.common.HttpServerError";
        super({
            source: lodash_1.camelCase(actionName),
            name: "HttpServerError",
            message: localizeUtils_1.getDefaultString(messageKey, actionName, responseBody),
            displayMessage: localizeUtils_1.getLocalizedString(messageKey, actionName, responseBody),
        });
    }
}
exports.HttpServerError = HttpServerError;
class UserCancelError extends teamsfx_api_1.UserError {
    constructor(actionName) {
        super({
            source: actionName ? lodash_1.camelCase(actionName) : "ui",
            name: "UserCancel",
            message: "User canceled",
        });
    }
}
exports.UserCancelError = UserCancelError;
class EmptyOptionError extends teamsfx_api_1.SystemError {
    constructor(source) {
        super({ source: source ? lodash_1.camelCase(source) : "UI" });
    }
}
exports.EmptyOptionError = EmptyOptionError;
class NotImplementedError extends teamsfx_api_1.SystemError {
    constructor(source, method) {
        super({ source: source, message: `Method not implemented:${method}` });
    }
}
exports.NotImplementedError = NotImplementedError;
class ConcurrentError extends teamsfx_api_1.UserError {
    constructor(source) {
        super({
            source: source,
            message: localizeUtils_1.getLocalizedString("error.common.ConcurrentError"),
        });
    }
}
exports.ConcurrentError = ConcurrentError;
function assembleError(e, source) {
    if (e instanceof teamsfx_api_1.UserError || e instanceof teamsfx_api_1.SystemError)
        return e;
    if (!source)
        source = "unknown";
    const type = typeof e;
    if (type === "string") {
        return new UnhandledError(new Error(e), source);
    }
    else if (e instanceof Error) {
        const err = e;
        const fxError = new UnhandledError(err, source);
        fxError.stack = err.stack;
        return fxError;
    }
    else {
        const message = JSON.stringify(e, Object.getOwnPropertyNames(e));
        return new UnhandledError(new Error(message), source);
    }
}
exports.assembleError = assembleError;
//# sourceMappingURL=common.js.map